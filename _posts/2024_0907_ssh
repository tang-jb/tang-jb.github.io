
强制SSH使用密钥认证禁止密码登录
需求#
工控机放在车上做了内网穿透，ssh端口暴露在公网下有安全隐患。
复杂密码则现场登录不便，故希望禁用ssh密码登录仅允许公钥认证。

方法#
修改如下文件

sudo vi /etc/ssh/sshd_config



#禁用密码验证

PasswordAuthentication no

#启用密钥验证

PubkeyAuthentication yes
### 

0.
sudo service ssh restart

>
1. Your SSH service is down
sudo service ssh status

2. You have the wrong credential
grep Port /etc/ssh/sshd_config

3. The port you’re trying to use is closed
sudo lsof -i -n -P | grep LISTEN

4. SSH isn’t installed on your server
ps -e |grep ssh

5. Firewall settings are preventing an SSH connection
sudo iptables-save # display IPv4 rules
sudo ufw allow 22/tcp

6.
ssh -vvv -i id_rsa [youruser]@[yourLinode]


7.

7.1 Generate your key.

ssh-keygen
7.2 Configure ssh to use the key.

vim ~/.ssh/config
Your config file should have something similar to the following:

Host SERVERNAME
Hostname ip-or-domain-of-server
User USERNAME
PubKeyAuthentication yes
IdentityFile ./path/to/key
You can add IdentitiesOnly yes to ensure ssh uses the specified IdentityFile and no other keyfiles during authentication. Setting IdentitiesOnly prevents failed authentications from occurring, when ssh would otherwise attempt to login with multiple keys. Setting this is also considered more secure, as you're not leaking information about other keys you have installed, and maintaining separation of your keys between different levels of access.

7.3 Copy your key to your server.

ssh-copy-id -i /path/to/key.pub SERVERNAME`
For example, ssh-copy-id -i ~/.ssh/id_res.pub -p 22 user@1.1.1.1

7.4 Troubleshooting

use "-vvv" option
Make sure the server has your PUBLIC key (.pub).
Make sure your IdentiyFile points to your PRIVATE key.
Make sure your .ssh directory has 700 and the files within are 600 permissions.
ssh-keygen will create files and directories for you with the proper permissions
tail -f /var/log/auth.log (on the server) and monitor errors when you attempt to login
If you have many key files, try IdentitiesOnly yes to limit the authentication to use the single, specified key.




8. Make sure you have a key that is being used
If you have GitHub Desktop installed, you can use it to clone repositories and not deal with SSH keys.

8.1 If you are using Git Bash, turn on ssh-agent:

# start the ssh-agent in the background
$ eval "$(ssh-agent -s)"
> Agent pid 59566
If you are using another terminal prompt, such as Git for Windows, turn on ssh-agent:

# start the ssh-agent in the background
$ eval $(ssh-agent -s)
> Agent pid 59566
Note: The eval commands above start ssh-agent manually in your environment. These commands may fail if ssh-agent already runs as a background system service. If that happens, we recommend you check the relevant documentation for your environment.

8.2 Verify that you have a private key generated and loaded into SSH.

$ ssh-add -l -E sha256
> 2048 SHA256:274ffWxgaxq/tSINAykStUL7XWyRNcRTlcST1Ei7gBQ /Users/USERNAME/.ssh/id_rsa (RSA)
The ssh-add command should print out a long string of numbers and letters. If it does not print anything, you will need to generate a new SSH key and associate it with GitHub.

Tip: On most systems the default private keys (~/.ssh/id_rsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn't need to run ssh-add path/to/key unless you override the file name when you generate a key.
